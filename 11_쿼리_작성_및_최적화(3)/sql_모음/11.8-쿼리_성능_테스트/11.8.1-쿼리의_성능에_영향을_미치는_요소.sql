# 11.8 - 쿼리 성능 테스트
-- 작성된 쿼리를 더 개선할 부분이 있는지 확인하려면 먼저 실행 계획을 살펴보고 문제가 될 만한 부분이 있는지 검토한다.
-- 특별히 문제될 부분이 없다면 쿼리를 직접 실행해 본다. (실행 계획 상으로는 보이지 않는 부분이 더 있을 수도 있기 때문)
-- 직접 실행할 때 여러 가지 방해 요소가 있는데, 어떤 부분을 고려해야 하고 어떤 영향 요소가 있는지 살펴보자.

## 11.8.1 - 쿼리의 성능에 영향을 미치는 요소
-- 직접 작성한 쿼리를 실행해 보고 성능을 판단할 때 가장 큰 변수는 MySQL 서버가 가지고 있는 여러 종류의 버퍼나 캐시일 것이다.
-- 어떤 종류의 버퍼나 캐시가 영향을 미치는지 살펴보고, 영향을 최소화 하는 법을 살펴보자.

### 11.8.1.1 - 운영체제의 캐시
-- MySQL 서버는 운영체제의 파일 시스템 관련 기능(시스템 콜)을 이용해 데이터 파일을 읽어온다.
-- 그런데 일반적으로 대부분의 운영체제는 한 번 읽은 데이터는 운영체제가 관리하는 별도의 캐시 영역에 보관해 뒀다가
    -- 다시 해당 데이터가 요청되면 디스크를 읽기 않고 캐시의 내용을 바로 MySQL 서버로 반환한다.
-- InnoDB 스토리지 엔진은 일반적으로 파일 시스템의 캐시나 버퍼를 거치지 않는 Direct I/O를 사용하므로 운영체제의 캐시가 그다지 큰 영향을 미치지 않는다.
-- 하지만, MyISAM 스토리지 엔진은 운영체제의 캐시에 대한 의존도가 높기 때문에 운영체제의 캐시에 따라 성능의 차이가 큰 편이다.
-- MyISAM 스토리지 엔진을 사용하고 있고 쿼리의 성능을 테스트하려면 다음과 같이 운영체제의 캐시 삭제 명령을 실행하고 테스트하자.
# linux 또는 mac 터미널에서 해당 운영체제의 맞게 실행해야 한다.
## 캐시나 버퍼의 내용을 디스크로 동기화 하기
linux > sync
## 운영체제에 포함된 캐시의 내용을 초기화한다.
linux > echo 3 > /proc/sys/vm/drop_caches

### 11.8.1.2 - MySQL 서버의 버퍼 풀(InnoDB 버퍼 풀과 MyISAM의 키 캐시)
/*
    운영체제의 버퍼나 캐시와 마찬가지로 MySQL 서버에서도 데이터 파일의 내용을 페이지(또는 블록) 단위로 캐시하는 기능을 제공한다.
    이때 InnoDB 스토리지 엔진이 관리하는 캐시를 버퍼 풀이라고 하며, MyISAM 엔진이 관리하는 캐시는 키 캐시라고 한다.

    InnoDB의 버퍼 풀은 인덱스 페이지, 데이터 페이지, 쓰기 작을 위한 버퍼링 작업까지 캐시해서 사용한다.
    하지만, MyISAM의 키 캐시는 인덱스 데이터에 대해서만 캐시 기능을 제공한다.
    또한, MyISAM의 키 캐시는 주로 읽기를 위한 캐시 역할을 수행하며, 제한적으로 인덱스 변경만을 위한 버퍼 역할을 수행한다.
    결굴 MyISAM은 인덱스를 제외한 테이블 데이터는 모두 운영체제의 캐시에 의존할 수밖에 없다.(운영체제의 종속적)

    MySQL 서버가 한 번 시작되면 InnoDB의 버퍼 풀과 MyISAM의 키 캐시의 내용을 강제로 퍼지(Purge, 삭제)할 방법이 없다.
    MySQL 서버에 포함된 키 캐시나 버퍼 풀을 초기화하려면 MySQL 서버를 재시작 해야 한다.
    그래서 InnoDB의 버퍼 풀이 자동으로 덤프되고 적재되지 않게 innodb_buffer_pool_load_at_startup 시스템 변수를 OFF 로 설정해야 한다.
    MySQL 서버가 종료될 때 버퍼 풀의 내용을 덤프하지 않고자 한다면 innodb_buffer_pool_dump_at_shutdown 시스템 변수도 OFF 로 설정해야 한다.
 */
-- InnoDB 버퍼 풀이 자동으로 덤프된 것들을 적재하고 싶지 않을 때
SET GLOBAL INNODB_BUFFER_POOL_DUMP_AT_SHUTDOWN = OFF;
-- MySQL 서버가 종료될 때 버퍼 풀의 내용을 덤프하고 싶지 않을 때
SET GLOBAL INNODB_BUFFER_POOL_LOAD_AT_STARTUP = OFF

### 11.8.1.3 - 독립된 MySQL 서버
-- MySQL 서버가 기동 중인 장비에 웹 서버나 다른 배치용 프로그램이 실행되고 있따면 테스트하려는 쿼리의 성능에 영향을 끼친다.
-- 따라서, MySQL 만 독립적으로 실행할 수 있는 환경이면 좋다.

### 11.8.1.4 - 쿼리 테스트 횟수
-- 실제 쿼리의 성능 테스트를 MySQL 서버의 상태가 워밍업된 상태(앞에서 언급한 캐시나 버퍼가 필요한 데이터로 준비된 상태)에서 진행할 지
-- 아니면 콜드 상태(캐시나 버퍼가 모두 초기화된 상태)에서 진행할 지도 고려해야 한다.
-- 일반적으로 쿼리의 성능 테스트는 콜드 상태가 아닌 워밍업된 상태를 가정하고 테스트하는 편이다. (실제 유저들도 서비스가 워밍업 된 상태로 사용할거 같다.)
-- 운영체제의 캐시나 MySQL의 버퍼 풀, 키 캐시는 그 크기가 제한적이라서 쿼리에서
    -- 필요로 하는 데이터나 인덱스 페이지보다 크기가 작으면 플러시 작업과 캐시 작업이 반복해서 발생하므로 쿼리를 한 번 실행해서 나온 결과를 그대로 신뢰해선 안 된다.
-- 테스트 하려는 쿼리를 번갈아 가면서 6 ~ 7번 정도 실행한 후, 처음 한 두번의 결과는 버린 후 나머지 결과의 평균 값을 기준으로 비교하는 것이 좋다.
-- 이렇게 테스트를 진행한 쿼리의 성능은 결국 상대적인 비교지 절대적인 성능은 아니다.
    -- 실제 서비스에선 더 많은 쿼리가 실행되고, 그 쿼리들 사이에서 자원에 대한 경합이 발생하기도 한다. 실 서비스는 테스트보다 더 느리다고 생각하는 것이 좋다.
