## 16.2 - 복제 아키텍처
/**
  MySQL 서버에서 발생하는 모든 변경 사항은 별도의 로그 파일에 순서대로 기록되는데, 이를 바이너리 로그라고 한다.
  바이너리 로그에는 데이터의 변경 내역뿐만 아니라 데이터베이스나 테이블의 구조 변경과 계정이나 권한의 변경 정보까지 모두 저장된다.
  바이너리 로그에 기록된 각 변경 정보들을 이벤트(Event)라고도 한다.

  MySQL의 복제는 이 바이너리 로그를 기반으로 구현됐는데, 소스 서버에서 생성된 바이너리 로그가 레플리카 서버로 전송되고,
  레플리카 서버에서는 해당 내용을 로컬 디스크에 저장한 뒤 자신이 가진 데이터에 반영함으로써 소스 서버와 레플리카 서버 간에 데이터 동기화가 이뤄진다.

  레플리카 서버에서 소스 서버의 바이너리 로그를 읽어 들여 따로 로컬 디스크에 저장해둔 파일을 릴레이 로그(Relay Log)라고 한다.
 */

/**
  MySQL의 복제는 세 개의 스레드에 의해 작동하는데, 이 세 스레드 중 하나는 소스 서버에 존재하며, 나머지 두 개는 레플리카 서버에 존재한다.
  각 스레드의 역할은 다음과 같다.

  - 바이너리 로그 덤프 스레드(소스 서버에 위치)
  - 레플리케이션 I/O 스레드(레플리카 서버에 위치)
  - 레플리케이션 SQL 스레드(레플리카 서버에 위치)

  - 바이너리 로그 덤프 스레드(Binary Log Dump Thread) - 소스 서버에서 스레드가 생성 :
      레플리카 서버는 데이터 동기화를 위해 소스 서버에 접속해 바이너리 로그 정보를 요청한다.
      소스 서버에서는 레플리카 서버가 연결될 때 내부적으로 바이너리 로그 덤프 스레드를 생성해서 바이너리 로그의 내용을 레플리카 서버로 전송한다.
      바이너리 로그 덤프 스레드는 레플리카 서버로 보낼 각 이벤트를 읽을 때 일시적으로 바이너리 로그에 잠금을 수행하며, 이벤트를 읽고 난 후에는 바로 잠금을 해제한다.
      이 스레드는 소스 서버에서 SHOW PROCESSLIST 명령을 통해 확인할 수 있다.

  - 레플리케이션 I/O 스레드(Replication I/O Thread) - 레플리카 서버에서 스레드 생성 :
      복제갸 시작(START REPLICA 또는 START SLAVE 명령)되면 레플리카 서버는 I/O 스레드를 생성하고,
      복제가 멈추면(STOP REPLICA 또는 STOP SLAVE 명령) I/O 스레드는 종료된다.
      I/O 스레드는 소스 서버의 '바이너리 로그 덤프 스레드'로부터 바이너리 로그 이벤트를 가져와 레플리카 로컬 서버의 파일(릴레이 로그)로 저장하는 역할을 담당한다.
      소스 서버의 바이너리 로그를 읽어서 파일로 쓰는 역할만 하기 때문에 "I/O" 스레드라고 명명된 것이다.

      이 스레드의 상태는 MySQL의 복제 현황을 보여주는 SHOW REPLICA STATUS, SHOW SLAVE STATUS 명령의 결과에서 Replica_IO_Running(Slave_IO_Running)
      컬럼에 표시된 값을 통해 확인할 수 있다.

  - 레플리케이션 SQL 스레드(Replication SQL Thread) - 레플리카 서버에서 스레드 생성 :
      앞에서 본 I/O 스레드에 의해 작성된 릴레이 로그 파일의 이벤트들을 읽고 실행한다.
      SHOW REPLICA(또는 SLAVE) STATUS 명령을 통해 Replica_SQL_Running 컬럼에 SQL 스레드의 현재 상태가 표시된다.

  I/O 스레드와, SQL 스레드는 둘 다 레플리카 서버에서 스레드가 생성되는데, 이 둘은 서로 독립적으로 동작한다.
  즉, SQL 스레드의 동작이 느리더라도 I/O 스레드는 그것과 무관하게 정상적으로 빠르게 소스 서버로부터 이벤트를 읽어올 수 있다.
  (근데, 한 프로세스의 자원은 한정적일텐데 그 중 하나의 스레드가 자원을 많이 점유하게 되면 다른 스레드에도 영향을 끼치지 않을까..?)
  또한, 레플리카 서버에서 소스 서버의 변경 사항들이 적용되는 것은 소스 서버가 동작하는 것과 별개로 진행되므로 레플리카 서버에 문제가 생기더라도 소스 서버의 영향은 없다.
  그러나, 소스 서버에 문제가 생겨 레플리카 서버의 I/O 스레드가 정상적으로 동작하지 않게 되면 복제는 에러를 발생시키고 바로 중단된다.
  단, 복제 기능만 중단된 것이므로 레플리카 서버가 쿼리를 처리하는 데 아무런 문제가 없다. 다만, 소스 서버로부터 동기화되지 못하기 때문에 예전 상태의 데이터를 보게 된다.

  복제가 시작되면 레플리카 서버는 앞에서 언급한 릴레이 로그를 비롯해 기본적으로 총 세 가지 유형의 복제 관련 데이터를 생성하고 관리한다.
  1. 릴레이 로그(Relay Log) :
    레플리케이션 I/O 스레드에 의해 작성되는 파일로, 소스 서버의 바이너리 로그에서 읽어온 이벤트(트랜잭션) 정보가 저장된다.
    릴레이 로그는 바이너리 로그와 마찬가지로 현재 존재하는 릴레이 로그 파일들의 목록이 담긴 인덱스 파일과 실제 이벤트 정보가 저장돼 있는 로그 파일들로 구성된다.
    릴레이 로그에 저장된 트랜잭션 이벤트들은 레플리케이션 SQL 스레드에 의해 레플리카 서버에 적용된다.

  2. 커넥션 메타데이터(Connection Metadata) :
    커넥션 메타데이터에는 I/O 스레드에서 소스 서버에 연결할 때 사용하는 DB 계정 정보 및 현재 읽고 있는 소스 서버의 바이너리 파일명과 파일 내 위치 값 등이 담겨 있으며,
    이러한 정보는 기본적으로 mysql.slave_master_info 테이블에 저장된다.

  3. 어플라이어 메타데이터(Applier Metadata) :
    SQL 스레드에서 릴레이 로그에 저장된 소스 서버의 이벤트들을 레플리카 서버에 적용(Replay)하는 컴포넌트를 어플라이어(Applier)라고 한다.
    어플라이어 메타데이터는 최근 적용된 이벤트에 대해 해당 이벤트가 저장돼 있는 릴레이 로그 파일명과 파일 내 위치 정보 등을 담고 있으며,
    레플리케이션 SQL 스레드는 이 정보들을 바탕으로 레플리카 서버에 나머지 이벤트들을 적용한다.
    이러한 정보는 기본적으로 mysql.slave_relay_log_info 테이블에 저장된다.

  커넥션 및 어플라이어 메타데이터는 MySQL의 시스템 변수인 master_info_repository와 relay_log_info_repository를 통해 어떤 형태로 데이터를 관리할 지 설정할 수 있다.
  설정 가능한 값으로는 FILE과 TABLE 두 가지가 있다.
  - FILE로 설정하면 커넥션 메타데이터와 어플라이어 메타데이터는 각각 MySQL 데이터 디렉터리에서 master.info와 relay-log.info라는 파일로 관리되며,
    이 두 파일의 경로는 --master-info-file 옵션과 relay_log_info_file 시스템 변수를 이용해 사용자가 원하는 경로의 파일로 지정할 수 있다.
  - TABLE로 설정하면 MySQL의 mysql 데이터베이스 내 slave_master_info와 slave_relay_log_info 테이블에 각각의 데이터가 저장된다.
  이 두 시스템 변수들은 8.0.2 버전부터 기본값이 TABLE로 변경됐으며 FILE 타입은 향후 버전에서 제거될 예정이다. (FILE 버전에는 에러가 많음)
 */

SHOW PROCESSLIST;
SHOW REPLICA STATUS;

SELECT * FROM mysql.slave_master_info;

-- SHOW GLOBAL VARIABLES ;
SELECT @@master_info_repository;
SELECT @@relay_log_info_repository;

SELECT * FROM mysql.slave_relay_log_info;
